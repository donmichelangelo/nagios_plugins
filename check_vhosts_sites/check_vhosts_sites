#!/bin/bash

#(c) Michael Seevogel 2017

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

SELF=$(basename "$0")
VERSION_NUMBER=0.2
USE_EXCLUDES=0
IPV=""
HTTP_SERVICE=""
CURL_TIMEOUT="5"
EXCLUDE_FILE=vhost_excludes_`hostname -f`

#ToDo:
# - Add a feature to check the loaded Vhosts against any DNS Server,
# so that it's possible to verify if the loaded Vhost and DNS answer still points to the same server.
# - Rework CLI switches

# Show the help for this script
function showHelp() {
cat << EOF
Usage: check_vhost_sites [OPTIONS]

  Core:
  --help              Display this help and exit.
  --ipv4              Force the check to use IPv4
  --ipv6              Force the check to use IPv6

  Options:
  --daemon=apache		The name of the http daemon. Value=apache
                                and NGINX (value=nginx) are supported.
  --timeout=<seconds>           Override curl's default timeout
  --excludes-from=<file>        Don't crawl domains that are listed in the excludes-from file.

EOF
}

for option in $*; do
	case "$option" in
	--help|-h)
	showHelp
	exit 0
	;;
 esac
done


# Read command line arguments
for option in $*; do
  case "$option" in
    --ipv4)
      IPV=" --ipv4 "
      ;;
    --ipv6)
      IPV=" --ipv6 "
      ;;
    --daemon=*)
	daem=$(echo $option | cut -d'=' -f2)
	if [[ $daem =~ apache|nginx ]] && [ ! -z "$daem" ]
	then
		HTTP_SERVICE=$daem
	elif [[ ! $daem =~ apache|nginx ]] || [ -z "$daem" ]
	then
                echo "$daem is not valid or daemon has been not set!" 
                showHelp
                exit 1

	fi
      ;;
	--timeout=*)
		TIMEOUT=$(echo $option | cut -d'=' -f2)
		if [[ ! $TIMEOUT =~ [0-9]+$ ]]
		then
			echo "Timeout value invalid. Only numbers allowed!"
			exit 1
		else
			CURL_TIMEOUT=" --connect-timeout $TIMEOUT "
			TIMEOUT_OVERRIDE=$TIMEOUT
		fi
	;;
    --excludes-from=*)
        excludes=$(echo $option | cut -d'=' -f2)
	if [[ ! -f $excludes ]]
        then
            echo "$excludes is not a file!"
            showHelp
            exit 1
        else
           USE_EXCLUDES=1
           EXCLUDES_FROM=$excludes
        fi
      ;;
    *)
      showHelp
      ;;
  esac
done


NAGIOS_PATHS=(/usr/libexec/nagios/plugins /usr/local/nagios/libexec /usr/lib/nagios/plugins /usr/lib64/nagios/plugins)

for NAGIOS_FOLDER in ${NAGIOS_PATHS[@]}
do
        if [ -f $NAGIOS_FOLDER/utils.sh ] && [ ! -z $NAGIOS_FOLDER/utils.sh ]
        then
                . $NAGIOS_FOLDER/utils.sh
                break
        fi
done

if [ -f /etc/icinga2/$EXCLUDE_FILE ] 
then
	source /etc/icinga2/$EXCLUDE_FILE

elif [ -f /etc/nagios/$EXCLUDE_FILE ]
then
        source /etc/icinga2/$EXCLUDE_FILE

fi





if [[ $HTTP_SERVICE == "apache" ]]
then

	for i in $(apachectl -t -D DUMP_VHOSTS 2> /dev/null | grep "port " | awk ' { print $4 } ')
	do


	        VHOST=$i
		#check if BL_REGEX contains any value
		if [ -z "$BL_REGEX" ]
		then
	                RET_CODE=$(timeout $TIMEOUT_OVERRIDE"s" curl -L --insecure $IPV $CURL_TIMEOUT -A "Mozilla/5.0 (Icinga PluginCheck; check_vhosts_sites; Site availibity check; en; rv:$VERSION_NUMBER) Gecko/20100101" -s -o /dev/null -w "%{http_code}" http://$i)
	                #assemble array
	                ARRAY+=($(echo "$VHOST,$RET_CODE;"))
	                DOM_ARRAY+=($(echo "$VHOST;"))
		
		else
			#Exclude vhosts from the check that are being matched by BL_REGEX	//Note: dots need to be escaped by double backslash
			if [[ ! $VHOST =~ $BL_REGEX ]]
			then
			        RET_CODE=$(timeout $TIMEOUT_OVERRIDE"s" curl -L --insecure $IPV $CURL_TIMEOUT -A "Mozilla/5.0 (Icinga PluginCheck; check_vhosts_sites; Site availibity check; en; rv:$VERSION_NUMBER) Gecko/20100101" -s -o /dev/null -w "%{http_code}" http://$i)
		                #assemble array
		                ARRAY+=($(echo "$VHOST,$RET_CODE;"))
		                DOM_ARRAY+=($(echo "$VHOST;"))

			fi
		fi

	done
	



fi



if [[ $HTTP_SERVICE == "nginx" ]]
then

	for i in $(nginx -T -q 2> /dev/null | sed -r -e 's/[ \t]*$//' -e 's/^[ \t]*//' -e 's/^#.*$//' -e 's/[ \t]*#.*$//' -e '/^$/d' | egrep ^server_name | awk ' { print $2 } ' | sed -re 's/[_\;]//' | grep -v ";")
	do

                VHOST=$i
                #check if BL_REGEX contains any value at all
                if [ -z "$BL_REGEX" ]
                then
	                RET_CODE=$(timeout $TIMEOUT_OVERRIDE"s" curl -L --insecure $IPV $CURL_TIMEOUT -A "Mozilla/5.0 (Icinga PluginCheck; check_vhosts_sites; Site availibity check; en; rv:$VERSION_NUMBER) Gecko/20100101" -s -o /dev/null -w "%{http_code}" http://$i)
	                #assemble array
	                ARRAY+=($(echo "$VHOST,$RET_CODE;"))
	                DOM_ARRAY+=($(echo "$VHOST;"))

                else
                        #Exclude vhosts from the check that are being matched by BL_REGEX       //Note: dots need to be escaped by double backslash
                        if [[ ! $VHOST =~ $BL_REGEX ]]
                        then
	                        RET_CODE=$(timeout $TIMEOUT_OVERRIDE"s" curl -L --insecure $IPV $CURL_TIMEOUT -A "Mozilla/5.0 (Icinga PluginCheck; check_vhosts_sites; Site availibity check; en; rv:$VERSION_NUMBER) Gecko/20100101" -s -o /dev/null -w "%{http_code}" http://$i)
        	                #assemble array
	                        ARRAY+=($(echo "$VHOST,$RET_CODE;"))
	                        DOM_ARRAY+=($(echo "$VHOST;"))

                        fi
                fi

	done

fi



unset VHOST
unset RET_CODE



for A in ${ARRAY[@]}
do

        RET_CODE=$(echo $A | cut -d';' -f1 | awk -F, ' { print $2 } ')
        VHOST=$(echo $A | cut -d';' -f1 | awk -F, ' { print $1 } ')

	#Return Code 5xx indicates mostly PHP errors like a crashed PHP-FPM daemon/pool, PHP coding errors or wrong htaccess/vhost config statements
	#Return Code 000 means errors at least on OSI layer 7 (and downwards) like domain does not exist anymore or it's not possible to lookup the domain anymore for whatever reason.
	#Return Code 400 status code indicates that the server could not understand the request due to invalid syntax (for example underscore in FQDN which also violates RFC).
        if [[ $RET_CODE =~ [5]{1,2}|000|400 ]]
        then
		NOTIFICATION_TEST+=($(echo -n "Vhost $VHOST returned HTTP error code $RET_CODE\n"))

        fi

done



if [ ${#NOTIFICATION_TEST[@]} -eq 0 ]
then
	echo "Ok - All Vhosts are reachable"
	EXIT_STATUS=$STATE_OK
elif  [ ${#NOTIFICATION_TEST[@]} > 0 ]
then
	echo -e "${NOTIFICATION_TEST[@]}" | sed 's/^[ \t]*//'
	exit 1
	EXIT_STATUS=$STATE_WARNING
else
	echo "Something went wrong. Unknown Plugin state."
	EXIT_STATUS=$STATE_UNKNOWN
	exit 2
fi


